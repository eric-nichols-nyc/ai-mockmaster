-- Step 1: Add new UUID and JSONB columns
ALTER TABLE interviews ADD COLUMN IF NOT EXISTS id_uuid UUID;
ALTER TABLE interviews ADD COLUMN IF NOT EXISTS questions_jsonb JSONB;

-- Step 2: Safely convert existing data
UPDATE interviews SET 
  id_uuid = CASE 
    WHEN id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$' THEN id::uuid
    ELSE gen_random_uuid() 
  END,
  questions_jsonb = CASE
    WHEN questions IS NULL THEN '[]'::jsonb
    WHEN jsonb_typeof(questions::jsonb) = 'array' THEN questions::jsonb
    ELSE jsonb_build_array(questions::jsonb)
  END;

-- Step 3: Validate conversion
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM interviews WHERE id_uuid IS NULL) THEN
    RAISE EXCEPTION 'Conversion failed: Some id_uuid values are NULL';
  END IF;
END $$;

-- Step 4: Drop the old columns
ALTER TABLE interviews DROP COLUMN IF EXISTS id;
ALTER TABLE interviews DROP COLUMN IF EXISTS questions;

-- Step 5: Rename the new columns to the original names
ALTER TABLE interviews RENAME COLUMN id_uuid TO id;
ALTER TABLE interviews RENAME COLUMN questions_jsonb TO questions;

-- Step 6: Add constraints
ALTER TABLE interviews ADD PRIMARY KEY (id);
ALTER TABLE interviews ALTER COLUMN id SET DEFAULT gen_random_uuid();
ALTER TABLE interviews ALTER COLUMN questions SET NOT NULL;

-- Step 7: Update foreign key references in other tables (if any)
-- Replace 'other_table' and 'interview_id' with actual table and column names
ALTER TABLE interview_id 
  ALTER COLUMN interview_id TYPE UUID USING 
    CASE 
      WHEN interview_id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$' THEN interview_id::uuid
      ELSE NULL
    END;